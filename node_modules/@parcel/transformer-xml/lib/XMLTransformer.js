"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _xmldom() {
  const data = require("@xmldom/xmldom");

  _xmldom = function () {
    return data;
  };

  return data;
}

var atom = _interopRequireWildcard(require("./atom"));

var rss = _interopRequireWildcard(require("./rss"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HANDLERS = {
  'http://www.w3.org/2005/Atom': atom
};
const NON_NAMESPACED_HANDLERS = {
  rss
};

var _default = new (_plugin().Transformer)({
  async transform({
    asset
  }) {
    let code = await asset.getCode();
    let parser = new (_xmldom().DOMParser)();
    let dom = parser.parseFromString(code, 'application/xml');
    let parts = [];
    let nonNamespacedHandlers = !dom.documentElement.namespaceURI ? NON_NAMESPACED_HANDLERS[dom.documentElement.nodeName] || {} : {};
    walk(dom, node => {
      var _HANDLERS$node$namesp;

      if (node.nodeType !== 1) {
        return;
      }

      let handler = node.namespaceURI ? (_HANDLERS$node$namesp = HANDLERS[node.namespaceURI]) === null || _HANDLERS$node$namesp === void 0 ? void 0 : _HANDLERS$node$namesp[node.localName] : nonNamespacedHandlers[node.nodeName];

      if (handler) {
        handler(node, asset, parts);
      }
    });
    code = new (_xmldom().XMLSerializer)().serializeToString(dom);
    asset.setCode(code);
    return [asset, ...parts];
  }

});

exports.default = _default;

function walk(element, visit) {
  visit(element);
  element = element.firstChild;

  while (element) {
    walk(element, visit);
    element = element.nextSibling;
  }
}